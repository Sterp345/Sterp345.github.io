<html>
<head>
<title>Мёртвые языки программирования за авторством Nedopirat</title>
<link rel="stylesheet" href="index.css">
</head>
<body>
	<div id="container">
		<div id="top_container">
			<div id="top">
				<h1>Становление ЯП</h1>
			</div>
			<div id="count">
				Счётчик
			</div>
		</div>
		<nav>
			<ul id="menu">
				<li><a class="a">История</a><ul class="button">
						<li><a class="a" href="wipl.htm">Что такое языки программирования?</a></li>
						<li><a class="a" href="ropl.htm">История языков программирования</a></li>
						<li><a class="a" href="Ada_lL.htm">Ада Лайвлейс</a></li>
						<li><a class="a" href="Char_Beb.htm">Чарльз Беббидж</a></li>
						<li><a class="a" href="asembler.htm">Ассемблер</a></li>
						<li><a class="a" href="fortrun.htm">Фортран</a></li>
						<li><a class="a" href="Dj_Bk.htm">Джон Бэкус</a></li>
						<li><a class="a" href="wcpl.htm">Почему создаются языки программирования?</a></li>
						<li><a class="a" href="dpl.htm">Мёртвые ЯП</a></li>
					</ul>
				</li>
				<li><a class="a">Мёртвые языки программирования</a><ul class="button">
						<li><a class="a" href="algol.htm">Алгол</a></li>
						<li><a class="a" href="brainfuck.htm">Брейнфак</a></li>
						<li><a class="a" href="basic.htm">Бейсик</a></li>
						<li><a class="a" href="delfi.htm">Делфи</a></li>
						<li><a class="a" href="cobol.htm">Кобол</a></li>
						<li><a class="a" href="lisp.htm">Лисп</a></li>
						<li><a class="a" href="haskel.htm">Хаскел</a></li>
					</ul>
				</li>
				<li><a class="a">Другое</a><ul class="button">
						<li><a class="a" href="index.htm">Главная</a></li>
						<li><a class="a" href="greatings.htm">Благодарности</a></li>
					</ul>
				</li>
			</ul>
		</nav>
		<div id="main">
			<h3 class="abz">Ранние этапы развития</h3>
			<p>
				Можно сказать, что первые <a href="wipl.htm">языки программирования</a> возникали ещё до появления современных электронных вычислительных машин: уже в XIX веке были изобретены устройства, которые можно с долей условности назвать программируемыми — к примеру, музыкальная шкатулка посредством металлического цилиндра и Жаккардовый ткацкий станок посредством картонных карт.
				Для управления ими использовались наборы инструкций, которые в рамках современной классификации можно считать прототипами предметно-ориентированных языков программирования.
				Значимым можно считать «язык», на котором леди <a href="Ada_lL.htm">Ада Августа</a> в 1842 году написала программу для вычисления чисел Бернулли для аналитической машины <a href="Char_Beb.htm">Чарльза Бэббиджа</a>, ставшей бы, в случае реализации, первым компьютером в мире, хотя и механическим — с паровым двигателем.
			</p>
			<p>
				В 1930—1940 годах А. Чёрч, А. Тьюринг, А. Марков разработали математические абстракции — для формализации алгоритмов.
			</p>
			<p>
				В это же время, в 1940-е годы, появились электрические цифровые компьютеры и был разработан язык, который можно считать первым высокоуровневым языком программирования для ЭВМ — «Plankalkül», созданный немецким инженером К. Цузе в период с 1943 по 1945 годы.
			</p>
			<p>
				Программисты ЭВМ начала 1950-х годов, в особенности таких, как UNIVAC и IBM 701, при создании программ пользовались непосредственно машинным кодом, запись программы на котором состояла из единиц и нулей и который принято считать языком программирования первого поколения.
			</p>
			<p>
				Первым практически реализованным языком стал в 1949 году так называемый «Краткий код», в котором операции и переменные кодировались двухсимвольными сочетаниями.
				Он был разработан в компании Eckert–Mauchly Computer Corporation, выпускавшей UNIVAC-и, созданной одним из сотрудников Тьюринга, Джоном Мокли.
				Краткий код был реализован с помощью интерпретатора.
			</p>
			<p>
				Вскоре на смену такому методу программирования пришло применение языков второго поколения, также ограниченных спецификациями конкретных машин, но более простых для использования человеком за счёт использования мнемоник и возможности сопоставления имён адресам в машинной памяти.
				Они традиционно известны под наименованием языков ассемблера и автокодов.
				Однако при использовании ассемблера становился необходимым процесс перевода программы на язык машинных кодов перед её выполнением, для чего были разработаны специальные программы, также получившие название <a href="asembler.htm">ассемблеров</a>.
				Сохранялись и проблемы с переносимостью программы с ЭВМ одной архитектуры на другую, и необходимость для программиста при решении задачи мыслить терминами «низкого уровня» — ячейка, адрес, команда.
				Позднее языки второго поколения были усовершенствованы: в них появилась поддержка макрокоманд.
			</p>
			<p>
				С середины 1950-х начали появляться языки третьего поколения, такие как <a href="fortrun.htm">Фортран</a>, <a href="lisp.htm">Лисп</a> и <a href="cobol.htm">Кобол</a>.
				Языки программирования этого типа более абстрактны и универсальны, не имеют жёсткой зависимости от конкретной аппаратной платформы и используемых на ней машинных команд.
				Программа на языке высокого уровня может исполняться на любой ЭВМ, на которой для этого языка имеется транслятор.
			</p>
			<p>
				Обновлённые версии перечисленных языков до сих пор имеют хождение в разработке программного обеспечения, и каждый из них оказал определённое влияние на последующее развитие языков программирования.
				Тогда же, в конце 1950-х годов, появился Алгол, также послуживший основой для ряда дальнейших разработок в этой сфере.
				Необходимо заметить, что на формат и применение ранних языков программирования в значительной степени влияли интерфейсные ограничения.
			</p>
			<h3 class="abz">Совершенствование</h3>
			<p>
				В период 1960-х — 1970-х годов были разработаны основные парадигмы языков программирования, используемые в настоящее время, хотя во многих аспектах этот процесс представлял собой лишь улучшение идей и концепций, заложенных ещё в первых языках третьего поколения.
			</p>
			<p>
				Кроме того, в 1960—1970-х годах активно велись споры о необходимости поддержки структурного программирования в тех или иных языках.
				В частности, голландский специалист Э. Дейкстра выступал в печати с предложениями о полном отказе от использования инструкций GOTO во всех высокоуровневых языках.
				Развивались также приёмы, направленные на сокращение объёма программ и повышение продуктивности работы программиста и пользователя.
			</p>
			<h3 class="abz">Объединение и развитие</h3>
			<p>
				В 1980-е годы наступил период, который можно условно назвать временем консолидации. Язык C++ объединил в себе черты объектно-ориентированного и системного программирования, правительство США стандартизировало язык Ада, производный от Паскаля и предназначенный для использования в бортовых системах управления военными объектами, в Японии и других странах мира осуществлялись значительные инвестиции в изучение перспектив так называемых языков пятого поколения, которые включали бы в себя конструкции логического программирования.
				Сообщество функциональных языков приняло в качестве стандарта ML и Лисп.
				В целом этот период характеризовался скорее опорой на заложенный в предыдущем десятилетии фундамент, нежели разработкой новых парадигм.
			</p>
			<p>
				Важной тенденцией, которая наблюдалась в разработке языков программирования для крупномасштабных систем, было сосредоточение на применении модулей — объёмных единиц организации кода.
				Хотя некоторые языки, такие, как ПЛ/1, уже поддерживали соответствующую функциональность, модульная система нашла своё отражение и применение также и в языках Модула-2, Оберон, Ада и ML.
				Часто модульные системы объединялись с конструкциями обобщённого программирования.
			</p>
			<p>
				Важным направлением работ становятся визуальные языки программирования, в которых процесс «написания» программы как текста заменяется на процесс «рисования» на экране ЭВМ.
				Визуальные языки обеспечивают наглядность и лучшее восприятие логики программы человеком.
			</p>
			<p>
				В 1990-х годах в связи с активным развитием Интернета распространение получили языки, позволяющие создавать сценарии для веб-страниц — главным образом Perl, развившийся из скриптового инструмента для Unix-систем, и Java.
				Возрастала также и популярность технологий виртуализации.
				Эти изменения, однако, также не представляли собой фундаментальных новаций, являясь скорее совершенствованием уже существовавших парадигм и языков.
			</p>
			<p>
				В настоящее время развитие языков программирования идёт в направлении повышения безопасности и надёжности, создания новых форм модульной организации кода и интеграции с базами данных.
			</p>
		</div>
		<div id="under">
			made by me
		</div>
	</div>
</body>
</html>
